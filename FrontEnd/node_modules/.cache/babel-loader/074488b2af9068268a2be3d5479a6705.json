{"ast":null,"code":"var _jsxFileName = \"/home/bharath1121/CSC307/FrontBack/FrontEnd/src/MyApp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Table from './Table';\nimport Form from './Form';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MyApp() {\n  _s();\n\n  useEffect(() => {\n    fetchAll().then(result => {\n      if (result) setCharacters(result);\n    });\n  }, []);\n  const [characters, setCharacters] = useState([]);\n\n  function updateList(person) {\n    setCharacters([...characters, person]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      characterData: characters,\n      removeCharacter: removeOneCharacter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      handleSubmit: updateList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n\n  function removeOneCharacter(index) {\n    const updated = characters.filter((character, i) => {\n      return i !== index;\n    });\n    setCharacters(updated);\n  }\n\n  async function fetchAll() {\n    try {\n      const response = await axios.get('http://localhost:5000/users');\n      return response.data.users_list;\n    } catch (error) {\n      //We're not handling errors. Just logging into the console.\n      console.log(error);\n      return false;\n    }\n  }\n}\n\n_s(MyApp, \"yTqKWMuDJvp83UrbRqHs5Onei9Q=\");\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/home/bharath1121/CSC307/FrontBack/FrontEnd/src/MyApp.js"],"names":["React","useState","useEffect","Table","Form","axios","MyApp","fetchAll","then","result","setCharacters","characters","updateList","person","removeOneCharacter","index","updated","filter","character","i","response","get","data","users_list","error","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AACfJ,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,QAAQ,GAAGC,IAAX,CAAgBC,MAAM,IAAI;AACxB,UAAIA,MAAJ,EACEC,aAAa,CAACD,MAAD,CAAb;AACH,KAHD;AAID,GALQ,EAKN,EALM,CAAT;AAMA,QAAM,CAACE,UAAD,EAAaD,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;;AACA,WAASW,UAAT,CAAoBC,MAApB,EAA4B;AAC1BH,IAAAA,aAAa,CAAC,CAAC,GAAGC,UAAJ,EAAgBE,MAAhB,CAAD,CAAb;AACD;;AACD,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE,QAAC,KAAD;AAAO,MAAA,aAAa,EAAEF,UAAtB;AAAkC,MAAA,eAAe,EAAEG;AAAnD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAM,MAAA,YAAY,EAAEF;AAApB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAQA,WAASE,kBAAT,CAA4BC,KAA5B,EAAmC;AACjC,UAAMC,OAAO,GAAGL,UAAU,CAACM,MAAX,CAAkB,CAACC,SAAD,EAAYC,CAAZ,KAAkB;AAClD,aAAOA,CAAC,KAAKJ,KAAb;AACD,KAFe,CAAhB;AAGAL,IAAAA,aAAa,CAACM,OAAD,CAAb;AACD;;AAED,iBAAeT,QAAf,GAA0B;AACxB,QAAI;AACF,YAAMa,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAU,6BAAV,CAAvB;AACA,aAAOD,QAAQ,CAACE,IAAT,CAAcC,UAArB;AACD,KAHD,CAIA,OAAOC,KAAP,EAAc;AACZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAO,KAAP;AACD;AACF;AACF;;GArCQlB,K;;KAAAA,K;AAuCT,eAAeA,KAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Table from './Table'\nimport Form from './Form';\nimport axios from 'axios';\n\nfunction MyApp() {\n  useEffect(() => {\n    fetchAll().then(result => {\n      if (result)\n        setCharacters(result);\n    });\n  }, []);\n  const [characters, setCharacters] = useState([]);\n  function updateList(person) {\n    setCharacters([...characters, person]);\n  }\n  return (\n    <div className=\"container\">\n      <Table characterData={characters} removeCharacter={removeOneCharacter} />\n      <Form handleSubmit={updateList} />\n    </div>\n  )\n\n\n  function removeOneCharacter(index) {\n    const updated = characters.filter((character, i) => {\n      return i !== index\n    });\n    setCharacters(updated);\n  }\n\n  async function fetchAll() {\n    try {\n      const response = await axios.get('http://localhost:5000/users');\n      return response.data.users_list;\n    }\n    catch (error) {\n      //We're not handling errors. Just logging into the console.\n      console.log(error);\n      return false;\n    }\n  }\n}\n\nexport default MyApp;"]},"metadata":{},"sourceType":"module"}